const express = require("express")
const router = express.Router()
const Soundcloud = require('soundcloud.ts').default;
const { supabase } = require('../../utils/authenticate');
const soundcloud = new Soundcloud(process.env.SOUNDCLOUD_CLIENT_ID, process.env.SOUNDCLOUD_OAUTH_TOKEN);

async function fetchUserID(url, supaUser){
    try {
        const user = await soundcloud.users.get(url);
        const dbID = user.id;

        const { data, error } = await supabase
            .from('users')
            .update({ soundcloud_id: dbID })
            .eq('id', supaUser);
        if (error) {
            console.error('Error updating soundcloud_id:', error);
            return null;
        }
        return user.id;
    } catch (err) {
        console.error('Error fetching user:', err);
        return null;
    }   
}



async function fetchScUser(scID) {
    try {
        const response = await soundcloud.users.get(scID);
        const scUsername = response.username;
        return scUsername;

    } catch (err) {
        console.error(`Error fetching user from scID: ${scID}`, err);
        return null;
    }
    
}

async function fetchScID(email) {
    try {
        const { data, error } = await supabase
            .from('users')
            .select('soundcloud_id')
            .eq('email', email);

        if (error) {
            console.error('Error fetching soundcloud_id:', error);
            return null;
        }
        return data[0]?.soundcloud_id || null;
    } catch (err) {
        console.error('Error fetching user scID:', err);
        return null;
    }
    
}

//new
async function fetchAndSaveUserInfo(userid) {
    try {
        const { data, error } = await supabase
            .from('users')
            .select('soundcloud_id')
            .eq('id', userid);
        
        const soundcloudID = data[0]?.soundcloud_id;
        const userInfo = await soundcloud.users.get(soundcloudID);

        const updateData = {
            username: userInfo.username,
            city: userInfo.city,
            avatar_url: userInfo.avatar_url,
            likes_count: userInfo.likes_count,
            permalink_url: userInfo.permalink_url,
          };
          
          const { data: profileData, error: profileError } = await supabase
          .from('users')
          .update(updateData)
          .eq('id', userid);
        
        if (profileError) {
          console.error('Error updating user info:', profileError);
        } else {
          console.log('User info updated:', profileData);
        }
        
        
    } catch (error) {
        console.error('Error fetching likes:', error);
        return null;
    }
}
//new

router.get('/', async (req, res) => {
    try {
        const email = req.user.email;
        const scID = await fetchScID(email);

        if (!scID) {
            return res.status(404).json({ error: 'SoundCloud ID not in database' });
        }

        const scUser = await fetchScUser(scID);

        if (!scUser) {
            return res.status(500).json({ error: 'Failed to fetch SoundCloud username' });
        }

        res.status(200).json({ username: scUser });
    } catch (err) {
        console.error('Error in route:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
})

router.post('/id', async (req, res) => {
    try {
        const url = req.body.url;
        const supaUser = req.user.id;
        const fetchedUser = await fetchUserID(url, supaUser);
        

        if (fetchedUser) {
            await fetchAndSaveUserInfo(supaUser);
            res.status(200).json({ message: 'SoundCloud ID updated successfully', soundcloud_id: fetchedUser });
          } else {
            res.status(500).json({ error: 'Failed to fetch SoundCloud user' });
          }
    } catch (err) {
        res.status(500).json({error: err})
    }
})

module.exports = router;